trend_path <- paste(base_path, 'data/temp/usim5_trend.csv', sep = '')
data = read.csv(candles_input_path, sep = '\t')
data = data[nrow(data):1, ]
data['Fech'] = log(data['Fech'])
data['Abertura'] = log(data['Abertura'])
RSI3 <- RSI(data['Fech'],n=5)
SMA50<-SMA(data['Fech'],n=50)
Trend<-data['Fech']-SMA50
Price<-data['Fech']-data['Abertura']
Class<-ifelse(Price>0,"UP","DOWN")
DataSet<-data.frame(RSI3,Trend,Class)
colnames(DataSet) <- c('RSI3', 'Trend', 'Class')
DataSet<-DataSet[-c(1:49),]
trainPercentage <- 0.7
trainIndex <- as.integer(nrow(DataSet) * trainPercentage)
testBeginIndex <- trainIndex+1
trainset <- DataSet[c(1:trainIndex),]
testset  <- DataSet[c(testBeginIndex:nrow(DataSet)),]
toPlot <- data[c(1:nrow(DataSet)),]
plot(toPlot['Fech'][,1],type = "o",col = "black", xlab = "Month", ylab = "Rain fall", main = "Rain fall chart")
crossValidationPercentage <- 0.8
numberOfSamples <- as.integer(crossValidationPercentage*nrow(trainset))
mysample <- sample(1:nrow(trainset), numberOfSamples)
diffsampple <- setdiff(1:nrow(trainset), mysample)
trainingset <- trainset[mysample,]
crossValidationSet <- trainset[diffsampple,]
colnames(trainingset) <- c('RSI3', 'Trend', 'Class')
colnames(crossValidationSet) <- c('RSI3', 'Trend', 'Class')
colnames(testset) <- c('RSI3', 'Trend', 'Class')
SVM<-svm(Class~RSI3+Trend,data=trainingset, kernel="radial",cost=1,gamma=1/2)
TrainingPredictions<-predict(SVM,trainingset,type="class")
TrainingData<-data.frame(trainingset,TrainingPredictions)
ggplot(TrainingData,aes(x=Trend,y=RSI3))+stat_density2d(geom="contour",aes(color=TrainingPredictions))+labs(title="SVM RSI3 and Trend Predictions",x="Open - SMA50",y="RSI3",color="Training Predictions")
short1Array <- c()
short2Array <- c()
long1Array <- c()
long2Array <- c()
for (i in c(1:20)) {
mysample <- sample(1:nrow(trainset), numberOfSamples)
diffsampple <- setdiff(1:nrow(trainset), mysample)
trainingset <- trainset[mysample,]
crossValidationSet <- trainset[diffsampple,]
colnames(trainingset) <- c('RSI3', 'Trend', 'Class')
colnames(crossValidationSet) <- c('RSI3', 'Trend', 'Class')
colnames(testset) <- c('RSI3', 'Trend', 'Class')
###
### ia.
###
SVM<-svm(Class~RSI3+Trend,data=trainingset, kernel="radial",cost=1,gamma=1/2)
TrainingPredictions<-predict(SVM,trainingset,type="class")
TrainingData<-data.frame(trainingset,TrainingPredictions)
ShortRange1<-which(crossValidationSet$RSI3 > 25 & crossValidationSet$RSI3 < 50 & crossValidationSet$Trend > -0.1 & crossValidationSet$Trend < 0.1)
ShortRange2<-which(crossValidationSet$RSI3 > 30 & crossValidationSet$RSI3 < 45 & crossValidationSet$Trend > -0.1 & crossValidationSet$Trend < 0.05)
LongRange1 <-which(crossValidationSet$RSI3 > 60 & crossValidationSet$RSI3 < 75 & crossValidationSet$Trend > 0 & crossValidationSet$Trend < 0.2)
LongRange2 <-which(crossValidationSet$RSI3 > 60 & crossValidationSet$RSI3 < 80 & crossValidationSet$Trend > 0 & crossValidationSet$Trend < 0.15)
ShortTrades<-crossValidationSet[c(ShortRange1),]
ShortCorrect<-((length(which(ShortTrades[,3]=="DOWN")))/nrow(ShortTrades))*100
print(paste('short-range-1: ', paste(ShortCorrect, nrow(ShortTrades), sep = " --- "), sep = " "))
short1Array <- cbind(short1Array, ShortCorrect)
ShortTrades<-crossValidationSet[c(ShortRange2),]
ShortCorrect<-((length(which(ShortTrades[,3]=="DOWN")))/nrow(ShortTrades))*100
print(paste('short-range-2: ', paste(ShortCorrect, nrow(ShortTrades), sep = " --- "), sep = " "))
short2Array <- cbind(short2Array, ShortCorrect)
LongTrades<-crossValidationSet[c(LongRange1),]
LongCorrect<-((length(which(LongTrades[,3]=="UP")))/nrow(LongTrades))*100
print(paste('long-range1: ', paste(LongCorrect, nrow(LongTrades), sep = " --- "), sep = " "))
long1Array <- cbind(long1Array, LongCorrect)
LongTrades<-crossValidationSet[c(LongRange2),]
LongCorrect<-((length(which(LongTrades[,3]=="UP")))/nrow(LongTrades))*100
print(paste('long-range2: ', paste(LongCorrect, nrow(LongTrades), sep = " --- "), sep = " "))
long2Array <- cbind(long2Array, LongCorrect)
print('----')
}
for (i in c(1:40)) {
mysample <- sample(1:nrow(trainset), numberOfSamples)
diffsampple <- setdiff(1:nrow(trainset), mysample)
trainingset <- trainset[mysample,]
crossValidationSet <- trainset[diffsampple,]
colnames(trainingset) <- c('RSI3', 'Trend', 'Class')
colnames(crossValidationSet) <- c('RSI3', 'Trend', 'Class')
colnames(testset) <- c('RSI3', 'Trend', 'Class')
###
### ia.
###
SVM<-svm(Class~RSI3+Trend,data=trainingset, kernel="radial",cost=1,gamma=1/2)
TrainingPredictions<-predict(SVM,trainingset,type="class")
TrainingData<-data.frame(trainingset,TrainingPredictions)
ShortRange1<-which(crossValidationSet$RSI3 > 25 & crossValidationSet$RSI3 < 50 & crossValidationSet$Trend > -0.1 & crossValidationSet$Trend < 0.1)
ShortRange2<-which(crossValidationSet$RSI3 > 30 & crossValidationSet$RSI3 < 45 & crossValidationSet$Trend > -0.1 & crossValidationSet$Trend < 0.05)
LongRange1 <-which(crossValidationSet$RSI3 > 60 & crossValidationSet$RSI3 < 75 & crossValidationSet$Trend > 0 & crossValidationSet$Trend < 0.2)
LongRange2 <-which(crossValidationSet$RSI3 > 60 & crossValidationSet$RSI3 < 80 & crossValidationSet$Trend > 0 & crossValidationSet$Trend < 0.15)
ShortTrades<-crossValidationSet[c(ShortRange1),]
ShortCorrect<-((length(which(ShortTrades[,3]=="DOWN")))/nrow(ShortTrades))*100
print(paste('short-range-1: ', paste(ShortCorrect, nrow(ShortTrades), sep = " --- "), sep = " "))
short1Array <- cbind(short1Array, ShortCorrect)
ShortTrades<-crossValidationSet[c(ShortRange2),]
ShortCorrect<-((length(which(ShortTrades[,3]=="DOWN")))/nrow(ShortTrades))*100
print(paste('short-range-2: ', paste(ShortCorrect, nrow(ShortTrades), sep = " --- "), sep = " "))
short2Array <- cbind(short2Array, ShortCorrect)
LongTrades<-crossValidationSet[c(LongRange1),]
LongCorrect<-((length(which(LongTrades[,3]=="UP")))/nrow(LongTrades))*100
print(paste('long-range1: ', paste(LongCorrect, nrow(LongTrades), sep = " --- "), sep = " "))
long1Array <- cbind(long1Array, LongCorrect)
LongTrades<-crossValidationSet[c(LongRange2),]
LongCorrect<-((length(which(LongTrades[,3]=="UP")))/nrow(LongTrades))*100
print(paste('long-range2: ', paste(LongCorrect, nrow(LongTrades), sep = " --- "), sep = " "))
long2Array <- cbind(long2Array, LongCorrect)
print('----')
}
paste(mean(short1Array), sd(short1Array), sep = " --- ")
paste(mean(short2Array), sd(short2Array), sep = " --- ")
print('----')
paste(mean(long1Array), sd(long1Array), sep = " --- ")
paste(mean(long2Array), sd(long2Array), sep = " --- ") ### melhor estrategia para compra.
RSI3
rsi_path <- paste(base_path, 'data/temp/usim5_rsi.csv', sep = '')
trend_path <- paste(base_path, 'data/temp/usim5_trend.csv', sep = '')
lapply(RSI3, write, rsi_path, append=TRUE, ncolumns=1000)
lapply(Trend, write, trend_path, append=TRUE, ncolumns=1000)
trainBegin <- 50
trainEnd   <- as.integer((trainIndex+50)*.8)
cvBegin    <- trainEnd + 1
cvEnd      <- testBeginIndex+50-1
testBegin  <- testBeginIndex+50
testEnd    <- nrow(DataSet)+50
cvBegin
cvEnd
rm(list = ls())
library(quantmod)
library(e1071)
library(ggplot2)
base_path <- '/home/nozes/IdeaProjects/'
candles_input_path <- paste(base_path, 'data\\candles\\ibov_historico.csv', sep = '')
rsi_path <- paste(base_path, 'data\\temp\\rsi.csv', sep = '')
trend_path <- paste(base_path, 'data\\temp\\trend.csv', sep = '')
data = read.csv(candles_input_path, sep = '\t')
candles_input_path <- paste(base_path, 'data/candles/ibov_historico.csv', sep = '')
data = read.csv(candles_input_path, sep = '\t')
data = read.csv(candles_input_path, sep = '\t')
data = data[nrow(data):1, ]
data['Fech'] = log(data['Fech'])
data['Abertura'] = log(data['Abertura'])
RSI3 <- RSI(data['Fech'],n=5)
SMA50<-SMA(data['Fech'],n=50)
Trend<-data['Fech']-SMA50
Price<-data['Fech']-data['Abertura']
Class<-ifelse(Price>0,"UP","DOWN")
DataSet<-data.frame(RSI3,Trend,Class)
colnames(DataSet) <- c('RSI3', 'Trend', 'Class')
DataSet<-DataSet[-c(1:49),]
trainPercentage <- 0.7
trainIndex <- as.integer(nrow(DataSet) * trainPercentage)
testBeginIndex <- trainIndex+1
trainset <- DataSet[c(1:trainIndex),]
testset  <- DataSet[c(testBeginIndex:nrow(DataSet)),]
toPlot <- data[c(1:testBeginIndex),]
crossValidationPercentage <- 0.8
numberOfSamples <- as.integer(crossValidationPercentage*nrow(trainset))
mysample <- sample(1:nrow(trainset), numberOfSamples)
diffsampple <- setdiff(1:nrow(trainset), mysample)
trainingset <- trainset[mysample,]
crossValidationSet <- trainset[diffsampple,]
colnames(trainingset) <- c('RSI3', 'Trend', 'Class')
colnames(crossValidationSet) <- c('RSI3', 'Trend', 'Class')
colnames(testset) <- c('RSI3', 'Trend', 'Class')
trainBegin <- 50
trainEnd   <- as.integer((trainIndex+50)*.8)
cvBegin    <- trainEnd + 1
cvEnd      <- testBeginIndex+50-1
testBegin  <- testBeginIndex+50
testEnd    <- nrow(DataSet)
SVM<-svm(Class~RSI3+Trend,data=trainingset, kernel="radial",cost=1,gamma=1/2)
TrainingPredictions<-predict(SVM,trainingset,type="class")
TrainingData<-data.frame(trainingset,TrainingPredictions)
head(TrainingData, n = 10)
TrainingData['Class'] == TrainingPredictions
TrainingData['Class'] == TrainingData['TrainingPredictions']
hits <- TrainingData['Class'] == TrainingData['TrainingPredictions']
hits[hits == TRUE]
length(hits[hits == TRUE])
length(hits)
CrossValidationPredictions<-predict(SVM,crossValidationSet,type="class")
CrossValidationPredictions<-predict(SVM,crossValidationSet,type="class")
CrossValidationPredictions<-predict(SVM,crossValidationSet,type="class")
CrossValidationData<-data.frame(crossValidationSet,CrossValidationPredictions)
hits <- CrossValidationData['Class'] == CrossValidationData['TrainingPredictions']
CrossValidationPredictions
CrossValidationPredictions<-predict(SVM,crossValidationSet,type="class")
CrossValidationData<-data.frame(crossValidationSet,CrossValidationPredictions)
CrossValidationData
hits <- CrossValidationData['Class'] == CrossValidationData['CrossValidationPredictions']
length(hits[hits == TRUE])
length(hits)
225/340
TestPredictions<-predict(SVM,testSet,type="class")
TestPredictions<-predict(SVM,testset,type="class")
TestData<-data.frame(testset,TestPredictions)
hits <- TestData['Class'] == TestData['TestPredictions']
length(hits[hits == TRUE])
length(hits)
502/729
TestPredictions
TestPredictions<-predict(SVM,testset,type="probability")
TestPredictions
TestPredictions<-predict(SVM,testset,type="probability")
TestPredictions
TestPredictions<-predict(SVM,testset)
TestPredictions
foo<-predict(SVM,testset)
foo
rm(list = ls())
library(quantmod)
library(e1071)
library(ggplot2)
base_path <- '/home/nozes/IdeaProject/'
candles_input_path <- paste(base_path, 'data/candles/^BVSP.csv', sep = '')
data = read.csv(candles_input_path, sep = '\t')
base_path <- '/home/nozes/IdeaProjects/'
candles_input_path <- paste(base_path, 'data/candles/^BVSP.csv', sep = '')
data = read.csv(candles_input_path, sep = '\t')
data = data[nrow(data):1, ]
data['Fech'] = log(data['Fech'])
data['Abertura'] = log(data['Abertura'])
rsi3 <- RSI(data['Fech'],n=3)
rsi5  <- RSI(data['Fech'],n=5)
rsi10 <- RSI(data['Fech'],n=10)
rsi15 <- RSI(data['Fech'],n=15)
rsi20 <- RSI(data['Fech'],n=20)
sma3 <- SMA(data['Fech'],n=3)
sma5 <- SMA(data['Fech'],n=5)
sma10 <- SMA(data['Fech'],n=10)
sma50 <- SMA(data['Fech'],n=50)
sma100 <- SMA(data['Fech'],n=100)
sma200 <- SMA(data['Fech'],n=200)
trend3 <- data['Fech']-sma3
trend5 <- data['Fech']-sma5
trend10 <- data['Fech']-sma10
trend50 <- data['Fech']-sma50
trend100 <- data['Fech']-sma100
trend200 <- data['Fech']-sma200
macd <- MACD(data['Fech'], 8, 17, 9, maType="EMA", percent=FALSE)
macdDifference <- macd[,1] - macd[,2]
volume <- data['Volume']
onBalanceVolume <- OBV(data['Fech'], data['Volume'])
bollinger <- BBands(data['Fech'], n = 20, maType = "EMA", sd = 2)
bollingerDown <-  data['Fech'] - bollinger[,1]
bollingerAvg <- data['Fech'] - bollinger[,2]
bollingerUp <- data['Fech'] - bollinger[,3]
bollingerNaoSei <- data['Fech'] - bollinger[,4]
Price<-data['Fech']-data['Abertura']
Class<-ifelse(Price>0,"UP","DOWN")
dataSet <- data.frame(rsi3, rsi5, rsi10, rsi15, rsi20, trend3, trend5,
trend10, trend50, trend100, trend200, macdDifference, volume, onBalanceVolume,
bollingerDown, bollingerAvg, bollingerUp, bollingerNaoSei, Class)
onBalanceVolume <- OBV(data['Fech'], data['Volume'])
volume
rm(list = ls())
library(quantmod)
library(e1071)
library(ggplot2)
base_path <- '/home/nozes/IdeaProjects/'
candles_input_path <- paste(base_path, 'data/candles/^BVSP.csv', sep = '')
data = read.csv(candles_input_path, sep = '\t')
data = data[nrow(data):1, ]
data['Fech'] = log(data['Fech'])
data['Abertura'] = log(data['Abertura'])
rsi3 <- RSI(data['Fech'],n=3)
rsi5  <- RSI(data['Fech'],n=5)
rsi10 <- RSI(data['Fech'],n=10)
rsi15 <- RSI(data['Fech'],n=15)
rsi20 <- RSI(data['Fech'],n=20)
sma3 <- SMA(data['Fech'],n=3)
sma5 <- SMA(data['Fech'],n=5)
sma10 <- SMA(data['Fech'],n=10)
sma50 <- SMA(data['Fech'],n=50)
sma100 <- SMA(data['Fech'],n=100)
sma200 <- SMA(data['Fech'],n=200)
trend3 <- data['Fech']-sma3
trend5 <- data['Fech']-sma5
trend10 <- data['Fech']-sma10
trend50 <- data['Fech']-sma50
trend100 <- data['Fech']-sma100
trend200 <- data['Fech']-sma200
#
# tb posso tentar outras configuracoes de MACD!
#
macd <- MACD(data['Fech'], 8, 17, 9, maType="EMA", percent=FALSE)
macdDifference <- macd[,1] - macd[,2]
volume <- data['Volume']
onBalanceVolume <- OBV(data['Fech'], data['Volume'])
#
# tb posso tentar outras configuracoes de bandas de bolliger
#
bollinger <- BBands(data['Fech'], n = 20, maType = "EMA", sd = 2)
bollingerDown <-  data['Fech'] - bollinger[,1]
bollingerAvg <- data['Fech'] - bollinger[,2]
bollingerUp <- data['Fech'] - bollinger[,3]
bollingerNaoSei <- data['Fech'] - bollinger[,4]
Price<-data['Fech']-data['Abertura']
Class<-ifelse(Price>0,"UP","DOWN")
dataSet <- data.frame(rsi3, rsi5, rsi10, rsi15, rsi20, trend3, trend5,
trend10, trend50, trend100, trend200, macdDifference, volume, onBalanceVolume,
bollingerDown, bollingerAvg, bollingerUp, bollingerNaoSei, Class)
myColNames <- c('rsi3', 'rsi5', 'rsi10', 'rsi15', 'rsi20', 'trend3', 'trend5',
'trend10', 'trend50', 'trend100', 'trend200', 'macdDifference', 'volume', 'onBalanceVolume',
'bollingerDown', 'bollingerAvg', 'bollingerUp', 'bollingerNaoSei', 'Class')
dataSet <- dataSet[-c(1:200),]
trainPercentage <- 0.7
trainIndex <- as.integer(nrow(dataSet) * trainPercentage)
testBeginIndex <- trainIndex+1
trainset <- dataSet[c(1:trainIndex),]
testset  <- dataSet[c(testBeginIndex:nrow(dataSet)),]
crossValidationPercentage <- 0.8
numberOfSamples <- as.integer(crossValidationPercentage*nrow(trainset))
mysample <- sample(1:nrow(trainset), numberOfSamples)
diffsampple <- setdiff(1:nrow(trainset), mysample)
trainingset <- trainset[mysample,]
crossValidationSet <- trainset[diffsampple,]
colnames(trainingset) <- myColNames
colnames(crossValidationSet) <- myColNames
colnames(testset) <- myColNames
trainBegin <- 50
trainEnd   <- as.integer((trainIndex+50)*.8)
cvBegin    <- trainEnd + 1
cvEnd      <- testBeginIndex+50-1
testBegin  <- testBeginIndex+50
testEnd    <- nrow(dataSet)+50
#
# todo usar boosted decision trees depois.
#
SVM<-svm(Class ~ . ,data=trainingset, kernel="radial",cost=1,gamma=1/18)
# verificando a performance no training set.
trainingPredictions<-predict(SVM,trainingset,type="class")
trainingData<-data.frame(trainingset, trainingPredictions)
results <- trainingData['Class'] == trainingData['trainingPredictions']
length(results[results==TRUE]) / length(results)
# verificando a performance no cross-validation-set
crossValidationPredictions <- predict(SVM,crossValidationSet,type="class")
crossValidationData <-data.frame(crossValidationSet, crossValidationPredictions)
results <- crossValidationData['Class'] == crossValidationData['crossValidationPredictions']
length(results[results==TRUE]) / length(results)
testPredictions <- predict(SVM,testSet,type="class")
testPredictions <- predict(SVM,testset,type="class")
testPredictions <- predict(SVM,testset,type="class")
testData <-data.frame(test, testPredictions)
testData <-data.frame(testset, testPredictions)
trainingData['trainingPredictions']
crossValidationData['crossValidationPredictions']
testData['testPredictions']
trainingData['trainingPredictions']
trainingData['trainingPredictions'][,1]
rep(NA, x = 3)
rep(NA, n = 3)
rep(NA, 3)
exportation = rep(NA, 200)
exportation
exportation <- c(exportation, trainingData['trainingPredictions'][,1])
exportation
exportation <- c(exportation, crossValidationData['crossValidationPredictions'][,1])
exportation
exportation <- c(exportation, testData['testPredictions'][,1])
length(exportation)
nrow(data)
exportation_path <- paste(base_path, 'data/temp/bvsp_predictions.csv', sep = '')
lapply(exportation, write, exportation_path, append=TRUE, ncolumns=1000)
exportation[200]
exportation[201]
trainingData['trainingPredictions'][1,1]
exportation[length(exportation)]
exportation
testData['testPredictions'][,1]
rm(list = ls())
library(quantmod)
library(e1071)
library(ggplot2)
base_path <- '/home/nozes/IdeaProjects/'
candles_input_path <- paste(base_path, 'data/candles/^BVSP.csv', sep = '')
exportation_path <- paste(base_path, 'data/temp/bvsp_predictions.csv', sep = '')
data = read.csv(candles_input_path, sep = '\t')
data = data[nrow(data):1, ]
data['Fech'] = log(data['Fech'])
data['Abertura'] = log(data['Abertura'])
rsi3 <- RSI(data['Fech'],n=3)
rsi5  <- RSI(data['Fech'],n=5)
rsi10 <- RSI(data['Fech'],n=10)
rsi15 <- RSI(data['Fech'],n=15)
rsi20 <- RSI(data['Fech'],n=20)
sma3 <- SMA(data['Fech'],n=3)
sma5 <- SMA(data['Fech'],n=5)
sma10 <- SMA(data['Fech'],n=10)
sma50 <- SMA(data['Fech'],n=50)
sma100 <- SMA(data['Fech'],n=100)
sma200 <- SMA(data['Fech'],n=200)
trend3 <- data['Fech']-sma3
trend5 <- data['Fech']-sma5
trend10 <- data['Fech']-sma10
trend50 <- data['Fech']-sma50
trend100 <- data['Fech']-sma100
trend200 <- data['Fech']-sma200
macd <- MACD(data['Fech'], 8, 17, 9, maType="EMA", percent=FALSE)
macdDifference <- macd[,1] - macd[,2]
volume <- data['Volume']
onBalanceVolume <- OBV(data['Fech'], data['Volume'])
bollinger <- BBands(data['Fech'], n = 20, maType = "EMA", sd = 2)
bollingerDown <-  data['Fech'] - bollinger[,1]
bollingerAvg <- data['Fech'] - bollinger[,2]
bollingerUp <- data['Fech'] - bollinger[,3]
bollingerNaoSei <- data['Fech'] - bollinger[,4]
Price<-data['Fech']-data['Abertura']
Class<-ifelse(Price>0,"UP","DOWN")
Class
Class
Class[,1]
Class
len(Class)
length(Class)
Class[1]
Class[-1]
length(Class[-1])
Class
c(1, 2, 3)
foo <- c(1, 2, 3)
foo[-1]
newClass <- Class[-1]
newClass
newClass <- Class[,-1]
newClass
newClass <- Class[-1]
newClass
newClass[,1]
c(newClass, "UP")
newClass <- c(newClass, "UP")
length(newClass)
dataSet <- data.frame(rsi3, rsi5, rsi10, rsi15, rsi20, trend3, trend5,
trend10, trend50, trend100, trend200, macdDifference, volume, onBalanceVolume,
bollingerDown, bollingerAvg, bollingerUp, bollingerNaoSei, newClass)
myColNames <- c('rsi3', 'rsi5', 'rsi10', 'rsi15', 'rsi20', 'trend3', 'trend5',
'trend10', 'trend50', 'trend100', 'trend200', 'macdDifference', 'volume', 'onBalanceVolume',
'bollingerDown', 'bollingerAvg', 'bollingerUp', 'bollingerNaoSei', 'Class')
dataSet <- dataSet[-c(1:200),]
head(dataSet)
trainPercentage <- 0.7
trainIndex <- as.integer(nrow(dataSet) * trainPercentage)
testBeginIndex <- trainIndex+1
trainset <- dataSet[c(1:trainIndex),]
testset  <- dataSet[c(testBeginIndex:nrow(dataSet)),]
crossValidationPercentage <- 0.8
numberOfSamples <- as.integer(crossValidationPercentage*nrow(trainset))
mysample <- sample(1:nrow(trainset), numberOfSamples)
diffsampple <- setdiff(1:nrow(trainset), mysample)
trainingset <- trainset[mysample,]
crossValidationSet <- trainset[diffsampple,]
colnames(trainingset) <- myColNames
colnames(crossValidationSet) <- myColNames
colnames(testset) <- myColNames
trainBegin <- 50
trainEnd   <- as.integer((trainIndex+50)*.8)
cvBegin    <- trainEnd + 1
cvEnd      <- testBeginIndex+50-1
testBegin  <- testBeginIndex+50
testEnd    <- nrow(dataSet)+50
#
# todo usar boosted decision trees depois.
#
SVM<-svm(Class ~ . ,data=trainingset, kernel="radial",cost=1,gamma=1/18)
# verificando a performance no training set.
trainingPredictions<-predict(SVM,trainingset,type="class")
trainingData<-data.frame(trainingset, trainingPredictions)
results <- trainingData['Class'] == trainingData['trainingPredictions']
length(results[results==TRUE]) / length(results)
crossValidationPredictions <- predict(SVM,crossValidationSet,type="class")
crossValidationData <-data.frame(crossValidationSet, crossValidationPredictions)
results <- crossValidationData['Class'] == crossValidationData['crossValidationPredictions']
length(results[results==TRUE]) / length(results)
install_github('slidify', 'ramnathv')
install.packages('devtools')
install_github('slidify', 'ramnathv')
library("devtools")
install_github('slidify', 'ramnathv')
install_github
install_github('slidify', 'ramnathv/slidify')
install_github('ramnathv/slidify')
this.dir <- dirname(parent.frame(2)$ofile)
setwd("~/labs/envirocar/r_code")
duration = read.csv("../data_integration/duration.csv")  # read csv file
duration
hist(duraion)
hist(duration)
duration[0]
duration[0,]
duration[0,0]
duration
duration[0,]
duration[,0]
duration[,1]
duration_as_list = duration[,1]
duration_as_list[0]
duration_as_list[1]
typeof(duration_as_list[1])
hist(duration_as_list)
duration_as_list[duration_as_list < 100]
hist(duration_as_list[duration_as_list < 100])
hist(duration_as_list[duration_as_list < 60])
hist(duration_as_list)
hist(duration_as_list)
hist(duration_as_list[duration_as_list < 100])
hist(duration_as_list[duration_as_list < 60])
hist(duration_as_list)
hist(duration_as_list)
hist(duration_as_list[duration_as_list < 100])
hist(duration_as_list[duration_as_list < 60])
hist(duration_as_list[duration_as_list < 100])
